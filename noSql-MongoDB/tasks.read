Терминалы:
https://www.mplay.run/mongodb-online-terminal
https://www.tutorialspoint.com/mongodb_terminal_online.php

1. Создайте БД test
- use  имя_коллекции - установит нужную базу данных в качестве текущей, если ее нет - создаст
- db - команда поможет узнать, какая БД текущая
1.1 Создайте БД netology
- команда use установит нужную базу данных в качестве текущей, если ее нет - создаст
- db - команда поможет узнать, какая БД текущая

1.2. Создайте коллекцию students 
db.createCollection(имя_коллекции)

2. В БД students добавьте студента:
{ firstname: "Andrey",
  lastname: "Petrov",
  age: 12,
  subjects: ["literature", "history", "mathematics"] }
  - insertOne(документ): добавляет один документ
  - проверим db.имя_коллекции.find() или с форматированным выводом db.имя_коллекции.find().pretty()
2.1.  В БД students добавьте студента:
{ firstname: "Alexey",
  lastname: "Ivanov",
  age: 25,
  subjects: ["history", "mathematics"] }

3. Добавьте несколько студентов:
  [{ firstname: "Andrey",
  lastname: "Vetrov",
  age: 55,
  subjects: ["physics", "anatomy"] },
  { firstname: "Ivan",
  lastname: "Vetrov",
  age: 16,
  subjects: ["physics", "anatomy"] }
  ]
 - db.users.insertMany([список документов]) - позволяет добавить несколько документов
 
 3.1.  Добавьте несколько студентов на выбор:
 - db.users.insertMany([список документов]) - позволяет добавить несколько документов
 - проверим db.имя_коллекции.find() или с форматированным выводом db.имя_коллекции.find().pretty()
 
 3.2. Создайте документ с информацией о студенте и добавьте его в коллекцию:
 { firstname: "Ivan",
  lastname: "Alexeev",
  age: 24,
  subjects: ["chemistry", "literature"] }
  
 - document=(документ) - создает документ
 - db.имя_коллекции.insert(документ) - добавляет документ в БД
 - проверим db.имя_коллекции.find() или с форматированным выводом db.имя_коллекции.find().pretty()
 
 4. Вывести всю информацию за исключением возраста всех студентов с именем Andrey 
 - db.имя_коллекции.find({ключ: значение}, {ключ-2: 1/0}) - аналог select...where(ключ = значение) в реляционных БД, 
 ключ-2 - задает те поля, которые будем выводить (1 - вывести/0 - нет)
 
4.1. Вывести имена у студентов с фамилией Vetrov
 - db.имя_коллекции.find({ключ: значение}, {ключ-2: 1/0}) - аналог select...where(ключ = значение) в реляционных БД, 
 ключ-2 - задает те поля, которые будем выводить (1 - вывести/0 - нет)
 
 4.2. Вывести студентов, изучающих literature
 -db.имя_коллекции.find({"ключ": значение})
 
 4.2.1 Вывести студентов, у которых любимый предмет (стоит на 1-ом месте) literature
 -db.имя_коллекции.find({"ключ.индекс": значение})
 
 5. Отсортировать документы по имени студента, вывести двоих, отступив от начала 1.
 - db.имя_коллекции.find().sort({ключ: значение}) ( по возрастанию (значение = 1) или по убыванию (значение = -1)) - сортирует
 - db.имя_коллекции.find().limit(значение) - ограничивает число строк
 - db.users.find().skip(значение) - пропускает строки
 
 5.1. Отсортируйте документы по названию любимого предмета (стоит на 1 месте) в обратном порядке, выведите 3 строки, начиная со 2-ой
 - db.имя_коллекции.find().sort({ключ: значение}) ( по возрастанию (значение = 1) или по убыванию (значение = -1)) - сортирует
 - db.имя_коллекции.find().limit(значение) - ограничивает число строк
 - db.имя_коллекции.find().skip(значение) - пропускает строки
 
6. Определить количество студентов в списке:
  - db.имя_коллекции.count() - считает колличество документов в результате
  
6.1 Определите количество студентов с именем Ivan:
  db.имя_коллекции.find({ключ: значение}).count()- считает колличество документов в результате
 
 7.  Выведите все неповторяющиеся имена студентов:
 db.имя_коллекции.distinct(ключ) - выбирает неповторяющиеся значения в поле
 
 7.1. Выведите все неповторяющиеся фамилии студентов:
 db.имя_коллекции.distinct(ключ) - выбирает неповторяющиеся значения в поле
 
8. Вывести студентов старше 25 лет (включительно) с именем Alexey:
db.users.find ({логический_оператор : [{ключ: {[оператор_сравнения:] значение}}, {ключ: {[оператор_сравнения:] значение}}]})
- операторы сравнения:
$eq (равно)
$ne (не равно)
$gt (больше чем)
$lt (меньше чем)
$gte (больше или равно)
$lte (меньше или равно)
$in определяет массив значений, одно из которых должно иметь поле документа
$nin определяет массив значений, которые не должно иметь поле документа
- логические операторы:
$or: соединяет два условия, и документ должен соответствовать одному из этих условий
$and: соединяет два условия, и документ должен соответствовать обоим условиям
$not: документ должен НЕ соответствовать условию
$nor: соединяет два условия, и документ должен НЕ соответстовать обоим условиям

8.1. Вывести студентов возрастом 55, 24 и 16 лет:
db.имя_коллекции.find ({ключ: {оператор_сравнения: значение}})
$eq (равно)
$ne (не равно)
$gt (больше чем)
$lt (меньше чем)
$gte (больше или равно)
$lte (меньше или равно)
$in определяет массив значений, одно из которых должно иметь поле документа
$nin определяет массив значений, которые не должно иметь поле документа

9. Обновить информацию о студенте с фамилией Ivanov - изменить возраст на 28 лет:
db.имя_коллекции.update(запрос, {$set: {ключ : значение}}, {опции})
- запрос = {логический_оператор : [{ключ: {[оператор_сравнения:] значение}}, {ключ: {[оператор_сравнения:] значение}}]}
- опции определяют параметры при обновлении документов:
 upsert  = true => обновлять документ, если он найден, и создавать новый, если такого документа нет
 upsert = false => не  создавать новый документ, если запрос на выборку не найдет ни одного документа
 multi = false => обновить первый элемент в выборке (используется по умолчанию, если данный параметр не указан) 
 multi = true = > должны обновляться все документы в выборке
 
9.1. Обновить информацию о студенте с фамилией Petrov - изменить имя на Valery:
db.имя_коллекции.update(запрос, {$set: {ключ : значение}}, {опции})
- запрос = {логический_оператор : [{ключ: {[оператор_сравнения:] значение}}, {ключ: {[оператор_сравнения:] значение}}]}
- опции определяют параметры при обновлении документов:
 upsert  = true => обновлять документ, если он найден, и создавать новый, если такого документа нет
 upsert = false => не  создавать новый документ, если запрос на выборку не найдет ни одного документа
 multi = false => обновить первый элемент в выборке (используется по умолчанию, если данный параметр не указан) 
 multi = true = > должны обновляться все документы в выборке
 
 10. Удалить студента  с фамилией Vetrov:
 - db.имя_коллекции.remove(запрос)
 - запрос = {логический_оператор : [{ключ: {[оператор_сравнения:] значение}}, {ключ: {[оператор_сравнения:] значение}}]}
 
 10.1 Удалите студентов, изучающих physics:
  - db.имя_коллекции.remove(запрос)
 - запрос = {логический_оператор : [{ключ: {[оператор_сравнения:] значение}}, {ключ: {[оператор_сравнения:] значение}}]}
 
10.2 Удалить всех студентов:
db.имя_коллекции.remove({})

10.3 Удалить всю коллекцию:
db.имя_коллекции.drop()

10.4 Удалить всю БД:
db.dropDatabase()
